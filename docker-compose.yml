version: '3.8'
services:
  frontend:
    hostname: frontend
    container_name: getby_frontend
    image: getby_frontend:1.0
    build:
      context: frontend
      dockerfile: frontend.Dockerfile
    stop_signal: SIGINT

    deploy:
      resources:
        limits:
          memory: 50M
          cpu: 0.3
        reservations:
          memory: 10M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    environment:
      - NODE_ENV=production
      - NODE_CONFIG_LOGLEVEL=debug
      - NPM_CONFIG_PREFIX=/home/getby/.npm-global

    ports: ["80:80"]

  backend:
    hostname: backend
    container_name: getby_backend
    image: getby_backend:1.0
    build:
      context: backend
      dockerfile: backend.Dockerfile
    stop_signal: SIGINT

    deploy:
      resources:
        limits:
          memory: 100M
          cpu: 0.3
        reservations:
          memory: 40M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    user: "getby"
    restart: always
    cap_drop: [ "ALL" ]

    environment:
      - UVICORN_PORT=8000
      - UVICORN_HOST=0.0.0.0
      - UVICORN_WORKERS=1
      - POSTGRES_DB_FILE=${POSTGRES_DB_FILE:?err}
      - POSTGRES_USER_FILE=${POSTGRES_USER_FILE:?err}
      - POSTGRES_PASSWORD_FILE=${POSTGRES_PASSWORD_FILE:?err}

    networks: [ "database" ]
    ports: [ "8000:8000" ]

    read_only: true

    depends_on:
      database:
        condition: service_healthy

    secrets:
      - source: db
        target: postgres_db
        mode: 0440
      - source: user
        target: postgres_user
        mode: 0440
      - source: passwd
        target: postgres_passwd
        mode: 0440

  database:
    hostname: database
    container_name: getby_database
    image: getby_database:1.0
    build:
      context: ./database
      dockerfile: postgres.Dockerfile
    stop_signal: SIGINT

    deploy:
      resources:
        limits:
          memory: 200M
          pids: 30
          cpu: 0.3
        reservations:
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    user: "postgres"
    restart: unless-stopped
    cap_drop: [ "ALL" ]

    environment:
      - POSTGRES_DB_FILE=${POSTGRES_DB_FILE:?err}
      - POSTGRES_USER_FILE=${POSTGRES_USER_FILE:?err}
      - POSTGRES_PASSWORD_FILE=${POSTGRES_PASSWORD_FILE:?err}
      - LANG="pt_BR.UTF-8"

    secrets:
      - source: db
        target: postgres_db
        mode: 0440
      - source: user
        target: postgres_user
        mode: 0440
      - source: passwd
        target: postgres_passwd
        mode: 0440

    networks: [ "database" ]
    expose: [ "5432" ]

    volumes:
      - postgres_db:/var/lib/postgresql/data:rw

    read_only: true
    tmpfs: [ "/var/run/postgresql" ]

    healthcheck:
       test: [ "CMD-SHELL", "pg_isready --dbname=$$(cat ${POSTGRES_DB_FILE:?err}) --username=$$(cat ${POSTGRES_USER_FILE:?err})" ]
       interval: 5s
       timeout: 5s
       retries: 5

networks:
  database:
    driver: bridge

volumes:
  postgres_db:

secrets:
  db:
    file: ./database/postgres-db.txt
  user:
    file: ./database/postgres-user.txt
  passwd:
    file: ./database/postgres-passwd.txt
